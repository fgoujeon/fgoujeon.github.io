@startuml transition_action.png
[*] --> state0
hide empty description
state0 -> state1 : event / action
@enduml
@startuml entry_action.png
hide empty description
[*] --> state0
state0 -> state1
state0 --> state2
state1 --> state2
state2 : entry / action
@enduml
@startuml exit_action.png
hide empty description
[*] --> state0
state0 : exit / action
state0 --> state1
state0 --> state2
@enduml
@startuml composite_state.png
state running {
    [*] --> initializing
    initializing --> idle : end_of_init
    idle -> processing_command : command_request
    processing_command -> idle : command_execution
}

[*] --> running
running -> failing : error
hide empty description
@enduml
@startuml motor_sm.png
hide empty description
[*] --> idle
idle --> starting : user_interface::start_request / start_motor
starting --> running : motor::start_event
running --> stopping : user_interface::stop_request / stop_motor
stopping --> idle : motor::stop_event
@enduml
@startuml guard.png
hide empty description
[*] --> state0
state0 -> state1 : event / action [guard]
@enduml
@startuml fan.png
hide empty description

state "reading memory" as reading_memory

state "spinning low" as spinning_low
spinning_low : entry / set speed low

state "spinning med" as spinning_med
spinning_med : entry / set speed med

state "spinning high" as spinning_high
spinning_high : entry / set speed high

reading_memory --> spinning_low : memory read [memory speed = low]
reading_memory --> spinning_med : memory read [memory speed = med]
reading_memory --> spinning_high : memory read [memory speed = high]

spinning_low -> spinning_med : plus button press
spinning_med -> spinning_high : plus button press
spinning_med -> spinning_low : minus button press
spinning_high -> spinning_med : minus button press
@enduml
@startuml initial_pseudostate.png
[*] --> idle
hide empty description
@enduml
@startuml orthogonal_regions.png
state initializing {
    [*] --> deploying_left_wing
    deploying_left_wing --> starting_left_reactor : left_wing_deployment

    ||

    [*] --> deploying_right_wing
    deploying_right_wing --> starting_right_reactor : right_wing_deployment
}

hide empty description
@enduml
@startuml rtc_diagram.png
[*] --> A
A --> B : E0

A : exit / say_hello_and_emit_E1()

B : E1 / say_world()

hide empty description
@enduml
@startuml lamp.png
[*] --> off
hide empty description
off -> on : button press / turn light on
on -> off : button press / turn light off
@enduml
@startuml mini_transition_event_external_sibling.png
            state S
            S -> T : E
            hide empty description
@enduml
@startuml mini_completion_transition_to_sibling.png
            state S
            S -> T
            hide empty description
@enduml
@startuml mini_external_self_transition.png
            state ST
            ST -> ST : E
            hide empty description
@enduml
@startuml mini_transition_completion_external_self.png
            state ST {
            }
            ST -> ST
            hide empty description
@enduml
@startuml mini_internal_transition.png
            state ST
            ST : E / A
            hide empty description
@enduml
@startuml completion_transition_from_simple_state.png
[*] --> S
S -> T
hide empty description
@enduml
@startuml completion_transition_from_composite_state.png
[*] --> S
S -> T

state S {
    [*] --> X0
    X0 -> [*] : some_event
    --
    [*] --> X1
    X1 -> [*] : some_other_event
}

hide empty description
@enduml
@startuml transition_locality_substate_local_star.png
[*] --> S
state S {
    [*] --> X
    state "*" as any
    any -> T : E
}
S : entry / entry_action
S : exit / exit_action
hide empty description
@enduml
@startuml transition_locality_self_external.png
[*] --> ST
state ST {
    [*] --> X
    X -> Y : some_event
}
ST : entry / entry_action
ST : exit / exit_action
ST -> ST : E / A
hide empty description
@enduml
@startuml transition_locality_self_local.png
[*] --> ST
state ST {
    [*] --> X
    X -> Y : some_event
}
ST : entry / entry_action
ST : exit / exit_action
ST : E / A
hide empty description
@enduml
@startuml regular_self_transition_with_simple_state.png
[*] --> ST
ST -> ST : E
ST : entry / entry_action
ST : exit / exit_action
hide empty description
@enduml
@startuml regular_self_transition_with_composite_state.png
[*] --> ST
ST -> ST : E

state ST {
    [*] --> X
    X -> Y : some_event
}

hide empty description
@enduml
@startuml object_dependency.png
object machine
object machine_context
object state_mold
object state_context
object action
object guard

machine ..> machine_context
machine ..> state_context
machine ..> state_mold
machine ..> action
machine ..> guard

state_mold ..> state_context
@enduml
@startuml external_transition_hook_decomposition.png
[*] --> initializing

state initializing {
    [*] --> deploying_left_wing
    deploying_left_wing --> starting_left_reactor : left_wing_sensor_signal
    starting_left_reactor --> [*] : left_reactor_rotation

    ||

    [*] --> deploying_right_wing
    deploying_right_wing --> starting_right_reactor : right_wing_sensor_signal
    starting_right_reactor --> [*] : right_reactor_rotation
}

initializing --> flying
initializing --> failing : error

hide empty description
@enduml
@startuml exception_recovery.png
state all_states as "*"

[*] --> idle
idle --> whatever
whatever --> whatever_2
whatever_2 -> idle

all_states --> failing : error
idle <-- failing : error_acknowledgement

hide empty description
@enduml
